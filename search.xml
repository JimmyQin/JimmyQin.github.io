<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jackson使用记录]]></title>
    <url>%2F2019%2F08%2F04%2Fjackson%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[记录jackson操作json的常用例子,基于2.x版本,持续更新…… JSON源字符串1&#123;"firstName":"jack", "age":18, "sex" :"男","birthday":"2013-08-04 00:00:00"&#125; JSON字符串转JavaBean123456789101112131415161718192021222324252627282930313233343536373839404142@JsonPropertyOrder(&#123; "birthday","age","name","sex"&#125;) // 序列化JSON的属性顺序@JsonIgnoreProperties(ignoreUnknown = true) // 是否忽略未知属性@JsonInclude(JsonInclude.Include.NON_NULL) // 序列化不包含属性值为NULL的属性public class Person &#123; @JsonProperty("firstName") // 别名,与JSON字符串的firstName属性对应 private String name; private int age; private String sex; @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss") // 格式化输出日期 private LocalDateTime birthday; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public LocalDateTime getBirthday() &#123; return birthday; &#125; public void setBirthday(LocalDateTime birthday) &#123; this.birthday = birthday; &#125; 123456public static void main(String[] args) &#123; String str = "&#123;\"firstName\":\"jack\", \"age\":18, \"sex\" :\"男\",\"birthday\":\"2013-08-04 00:00:00\"&#125;"; ObjectMapper mapper = new ObjectMapper(); mapper.registerModule(new JavaTimeModule()); // 使用java8的LocalDateTime,需要导入jackson-datatype-jsr310包 Person p = mapper.readValue(str, Person.class);&#125; 待续……]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工厂模式-设计模式]]></title>
    <url>%2F2019%2F07%2F17%2Fdesign-patterns-factory%2F</url>
    <content type="text"><![CDATA[工厂模式，字面上理解，工厂就是生产产品的，而设计模式中的工厂就是拿来创建对象实例的，通过工厂统一去生产或创建，一切交给工厂，减去繁琐的步骤，就能轻松通过工厂来获得产品。 工厂模式样例以工厂生产家具为例，现代人们需要家具的时候，不会自己去造家具，而是通过工厂去造，不必自己费心费力。 家具抽象类1234public interface Furniture &#123; void name();&#125; 沙发家具产品12345public class Sofa implements Furniture &#123; public void name() &#123; System.out.println("沙发"); &#125;&#125; 椅子家具产品12345public class Desk implements Furniture &#123; public void name() &#123; System.out.println("椅子"); &#125;&#125; 抽象工厂123public abstract class AbstractFurnitureFactory &#123; public abstract &lt;T extends Furniture&gt; T createFurniture(Class&lt;T&gt; c);&#125; 生产家具工厂只要通过参数需要什么类型的家具，工厂会帮你创建一个家具，通过反射的形式，能根据传入的家具类型来创建需要的家具。 12345678910111213public class FurnitureFactory extends AbstractFurnitureFactory &#123; public &lt;T extends Furniture&gt; T createFurniture(Class&lt;T&gt; c) &#123; Furniture furniture = null; try &#123; furniture = (T)Class.forName(c.getname()).newInstance(); &#125; catch (exception e) &#123; System.out.println("生产家具失败，废品"); &#125; return (T)furniture &#125; &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客]]></title>
    <url>%2F2019%2F07%2F12%2Ftext%2F</url>
    <content type="text"><![CDATA[请输入密码进行阅读. Incorrect Password! No content to display! U2FsdGVkX18u5pUfSqDTfy6l82xKkqbunbEI4nwoC4bmq3/ix91v12LPcys5jM79x8HkdjUM5gJ6cx8UZruqFH0PQU70EhDAHxeRVfSRcnd+2WI9gb707ahxKvy3S7ql9QAT+bLZ1hPBorFcpvTdffbxRTQHpg2sxQNs6wI/4gHmWa+XdX0lDA5il/qN2WUaVOCgdmtNs0jlDeCZlK91G/WStwZv/DTDZ/fcNRR1+JeXPFk2dw2qSfRNQY4fivHEe3vYroh3ys25krFOOY6zxGau8YD/Q+xfJ+BIP8R2YZbzbH60pWb6hu1UsSPaALDPrsUiEsNrdEB4++LGB8tyibBDj7tvlVy8PBrlUHp2jQQE/CPE/szixYsqgIZxm5PdcQU4i6N4mQjGpKEKwBJUyp6pe/uKVGd/4AUC60vkTRJn0ybQPoARXQ2IhUuzA0i3KzcCcjeFMEpuVUsGvv7LeIy48JtyR2+NAQRBSGkfpG8cepptk0CcP8MhOo3ulUBdV3LM1mUst0P7w3dI7qTCLmBUFRdQkOW40TzK+iHldQ7J7oH9g88ICpzpFTxwAb9r357UOnlaQHhV+BSJTrLU+7Dldrug4Hs1m6b4ST8kiQBA+Wbuwriv4l18NwtizsOWyNpVAMNfmSu8oJX/6Ux6jyAxkZX/1GuX4i6nIWthS+5Bfun7+VNeUObjn46doCNtIUo7/KeZQHYbLZV6O1uqq4O0CwMQwXe098SqCLDIoo7lGSzOiFv+Jf16iNJ7x6/NokpQPC2MRGRUrlHIc8jjaVXsdZUwVQNbL4F6LUJ10yV3bHnz//WPaQVM6CnFHT3gsQbf7Bp3NEmbee3Agi1Qof1Tpxxl8gVnfOVjaRzFVeLXg5eICVzjypJsmp+mvSlq0bo7xjxQGZs4yd1s+uZZfPqrlDsxsjQUmaJFoyHplmErUrpsxnKMnKNMk0bgwEltqThZorORA1d/OXMFPIchpYvL/ogZHSBlp06ZmXv2ooqoVfDD6JIdbAZnkEUwEoEPN+wPKi2+Ch2OPVm8JsozQ5V3eWK2q0q9TqPuH6VdvCyETEO70McuQgEnOuY24DHD1fJVD5IuqWw+vhNHBPy/JhGVt65lPHNG+6OLFA8BXbcSaokC1IaCrnlGiCUpjbNFcP5cRpu/FgJhVlepD1rd7/fTY/ogKI6hUYe0AiIXcSgjcwXrlnq29UkZDCLAJ3jS/KOQBm6MnRko03YpSOxqSPcnDhwODosrhlkas7F4g2TJ9GJjf7eep2WKUXp2HyOxK2uQGVc6GJohwAeffONyjN9QoY1ymGQpyLJLMaBCZo+zS+isKBOf+o5AA24n1TBImYdSSzFxowidU1u72l0AScm7qIA3OColS4Cs8Sb2q5c8rvQVmz32NKZ9C79iMgXlqLYSKmv3U/ma8eRipqrNg7e3r+k9T3vKSCND9jFSBNmQKCp+X3/mozu6JprY8RRUECBZxRZ/lP6/0/oHeSi7SzxTV3t7TuPv7LwiFv02hAOM8+1ZXfvi826iNdvolBCPmURrUJitu41QeqywmZX67Du/ImVHWC71blYZmWhgPAUoLSKjeymooRjp4KWxJvZrydWmweaYKy3hVmYzbeRQFeYt1nKZF6qGbYjw13Gf2rqY+r1wXAEqlh3ay155QX6Qd0Y3WmWhM5i5T+mwwLVe0gNu3wNOnA0ENXTOS34DiXPB6YAd07UjvO6omFDLKQlyxEUCnt+vzRnIotnMnMmHHzhw6bThY9cxRV/GPao65XgS1CiR2kDcbiEAjvjRnReB9P5YgYuUoKXXUEBjaWPeUkKIk/F0MgT09K7qiEBN+e1pW+ZDieSAvwO4y3ie7uAlNlpy4mIavDXNFXeRvjV80em+uvg00J1TSLUWhnwXX4JUQ+2DHA4QC11Ia3khY8tGHOArCLEAJzXsZKmfhx2BnCwZpHpxW68TPgbe0+iKzyp08ta/IgXe5RDUdlEc21wbtMulnWZhHMfGHMUV4CnHMggum9KvJu5Kg1YZXbtXn/cygd6Nl/IiuuA/mQ/4ZNozgbKg4sruDQDgLdv0xcoL0NggueAQl463DyOrfcfDQEkhGTYLdf25/SRaxArDjDAuBuez1m5zjNhcTd6AJnKwP/8UZvq1FP4SuHBu3eMj+2kPgu3mMISLClkk766VxhC+OwjBgQjdgBUSHRWYreM3Vy94PRtGrIZaWmll87//z1caDhYH9X+UyEgTBb5PjERVvh+LVAPBY+Ji3OXOpt1mZiKFKyDYxVydlWXytbEY+aWzNn4CXyWulIaBTArrV/UNDyFDUkdhfEqZT7PUNqN5AWbyvOdNopG3/MtWh8LKaKHe4lmuWeQ1KNZAnk5QVgHNpnAIW6A7CF0voCaaZPdhlOK+qxuCNhTDvjFAXfRj0+rsNNAV3WJLYrcWGykIkrfjaJy5jbLZyzZue9saeR7U59g77MAHGy6747VpfTGHOkXZ03BNzfaTJT5txV69qa8SYXCBiIo+2+boPCprtzfhRTHDLndI7Rfysz9raUecLdqj0mti6jxpjxgz8qMzxzgJYn2+lr7JkqxnYVHkIKIH1Q==]]></content>
      <categories>
        <category>php</category>
        <category>框架</category>
        <category>phalcon</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hero</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
